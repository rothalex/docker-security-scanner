image: docker:stable

services:
  - docker:stable-dind

variables:
  CI_APPLICATION_REPOSITORY: "registry.gitlab.com/aroth/docker-security-scanning"
  CI_APPLICATION_TAG: $CI_COMMIT_SHA
  CI_APPLICATION_NAME: "tomcat-security-scanned"

stages:
  - build
  - test
  - deploy

## Build a docker container and pass it to the next stage
build:
  stage: build
  script:
    - docker build -t ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_NAME}-${CI_APPLICATION_TAG} . 
    - mkdir image_cache
    - docker save ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_NAME}-${CI_APPLICATION_TAG} > image_cache/cached_image.tar    
  artifacts:
    paths:
      - image_cache

# Perform security scan with clair
clair_scanning:
  stage: test
  script:
    - docker load -i image_cache/cached_image.tar
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_NAME}-${CI_APPLICATION_TAG} || true
  artifacts:    
    paths: [gl-container-scanning-report.json, image_cache]

dagda_scanning:
  stage: test
  image: 3grander/dagda
  script:
    - docker pull mongo
    - docker run -d -p 27017:27017 mongo
    - export VULNDB_HOST='127.0.0.1' 
    - export VULNDB_PORT=27017       
    - export DAGDA_HOST='127.0.0.1'
    - export DAGDA_PORT=5000
    - docker run -p $DAGDA_PORT:$DAGDA_PORT \
                     -v /var/run/docker.sock:/var/run/docker.sock:ro \
                     -v /tmp:/tmp:ro \ 
                     dagda:0.7.0 start -s $DAGDA_HOST -p $DAGDA_PORT \
                                       -m $VULNDB_HOST -mp $VULNDB_PORT
    - python3 dagda.py vuln --init
    - python3 dagda.py vuln --product openldap --product_version 2.2.20
    - python dagda.py --docker_image ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_NAME}-${CI_APPLICATION_TAG}
  artifacts:    
    paths: [image_cache]

container_deploy:
  stage: deploy
  script:
    - docker load -i image_cache/cached_image.tar
    - docker login registry.gitlab.com -u ${REGISTRY_USER} -p ${REGISTRY_TOKEN}
    ## deactivated push becaue of a bug in gitlab
    #- docker push ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_NAME}-${CI_APPLICATION_TAG} 