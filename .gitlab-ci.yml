image: docker:stable

services:
  - docker:stable-dind

variables:
  CI_APPLICATION_REPOSITORY: "apm-docker"
  CI_APPLICATION_TAG: $CI_COMMIT_SHA
  CI_APPLICATION_NAME: "tomcat-security-scanned"
stages:
  - build
  - test

## Build a docker container and pass it to the next stage
build:
  stage: build
  script:
    - docker build -t ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_NAME}-${CI_APPLICATION_TAG} .  
  artifacts:
    paths:
      - /var/lib/docker

# Perform security scan with clair
security-scan:
  stage: test
  script:
    - apt-get autoremove -y
    - apt-get clean all -y 
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_NAME}-${CI_APPLICATION_TAG} || true
  artifacts:
    paths: [gl-container-scanning-report.json]